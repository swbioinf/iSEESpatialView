use_git()
sessionInfo()
library(devtools)
library(usethis)
library(roxygen2)
renv::init()
?use_package
use_package("Seurat", min_version='5.0.1')
use_package("SingleCellExperiment")
use_package("bioc::SingleCellExperiment")
renv::install("bioc::SingleCellExperiment")
renv::install("bioc::iSEE")
library(Seurat)
counts_matrix <- GetAssayData(so, assay = assay, layer = 'counts')
source(file.path("/Users/s2992547/repos/polyps-smi/code/alikhuseynov_seurat_subset_fix/subset_obj_seurat.R"))
seurat_file_in <- "/Users/s2992547/Desktop/GSKpolyps_6k_06_named.RDS"
sce_file_out <-  "/Users/s2992547/Desktop/GSKpolyps_6k_06_named_sce_conversion"
so <- readRDS(seurat_file_in)
assay="Nanostring"
counts_matrix <- GetAssayData(so, assay = assay, layer = 'counts')
norm_matrix   <- GetAssayData(so, assay = assay, layer = 'data')
sessionInfo()
renv::status()
renv::update('Seurat')
#source(file.path("/Users/s2992547/repos/polyps-smi/code/alikhuseynov_seurat_subset_fix/subset_obj_seurat.R"))
seurat_file_in <- "/Users/s2992547/Desktop/GSKpolyps_6k_06_named.RDS"
sce_file_out <-  "/Users/s2992547/Desktop/GSKpolyps_6k_06_named_sce_conversion"
so <- readRDS(seurat_file_in)
assay="Nanostring"
renv::update('Matrix')
ls()
use_package("Matrix", min_version='1.6.3')
library(devtools)
library(usethis)
library(roxygen2)
use_package("Matrix", min_version='1.6.3')
renv::update('Matrix')
#source(file.path("/Users/s2992547/repos/polyps-smi/code/alikhuseynov_seurat_subset_fix/subset_obj_seurat.R"))
seurat_file_in <- "/Users/s2992547/Desktop/GSKpolyps_6k_06_named.RDS"
sce_file_out <-  "/Users/s2992547/Desktop/GSKpolyps_6k_06_named_sce_conversion"
so <- readRDS(seurat_file_in)
assay="Nanostring"
library(devtools)
library(usethis)
library(roxygen2)
library(Seurat)
renv::update(SeuratObject)
renv::update('SeuratObject')
renv::update('SeuratObject', rebuild = TRUE)
assay="Nanostring"
counts_matrix <- Seurat::GetAssayData(so, assay = assay, layer = 'counts')
norm_matrix   <- Seurat::GetAssayData(so, assay = assay, layer = 'data')
# gene info
gene_table <- so@assays[[assay]]@meta.data
rownames(gene_table) <- rownames(so@assays[[assay]])
# cell info
anno_table <- so@meta.data
# One image (slide) at a time
images <- names(so@images)
coords_list <- lapply(FUN=Seurat::GetTissueCoordinates(), X=images, so)
coords_list <- lapply(FUN=Seurat::GetTissueCoordinates(), X=images, object=so)
?GetTissueCoordinates
coords_list <- lapply(FUN=Seurat::GetTissueCoordinates, X=images, object=so)
coords_list
coords <- bind_rows(coords_list)
coords <- dplyr::bind_rows(coords_list)
rownames(coords) <- coords$cell
coords
so@meta.data
fov_id = 'fov_name'
fov_lookup <- setNames(so@metadata[,fov_id], nm=so$cell)
fov_lookup
so@metadata
so@meta.data
fov_lookup <- setNames(so@meta.data[,fov_id], nm=so$cell)
rownames(so)
colnames(so)
fov_lookup <- setNames(so@meta.data[,fov_id], nm=colnames(so))
?group_by
?as.data.frame
coords.local <- coords
coords.local$fov_name <- fov_lookup[coords.local$cell]
coords.local <-
coords.local %>% dplyr::group_by(fov_name) %>%
mutate(xmin = min(x),
ymin = min(y),
xmax = max(x),
ymax = max(y)) %>%
dplyr::ungroup() %>%
dplyr::mutate(
x = (x-xmin) * 1/(xmax-xmin),
y = (y-ymin) * 1/(ymax-ymin)
) %>%
dplyr::select(x,y,cell) %>%
as.data.frame()
coords.local <- coords
coords.local$fov_name <- fov_lookup[coords.local$cell]
coords.local <-
coords.local  |> dplyr::group_by(fov_name)  |>
mutate(xmin = min(x),
ymin = min(y),
xmax = max(x),
ymax = max(y))  |>
dplyr::ungroup()  |>
dplyr::mutate(
x = (x-xmin) * 1/(xmax-xmin),
y = (y-ymin) * 1/(ymax-ymin)
)  |>
dplyr::select(x,y,cell)  |>
as.data.frame()
?mutate
dplyr::mutate()
coords.local  |> dplyr::group_by(fov_name)  |>
mutate(xmin = min(x),
ymin = min(y),
xmax = max(x),
ymax = max(y))  |>
dplyr::ungroup()  |>
dplyr::mutate(
x = (x-xmin) * 1/(xmax-xmin),
y = (y-ymin) * 1/(ymax-ymin)
)
coords.local <-
coords.local  |> dplyr::group_by(fov_name)  |>
dplyr::mutate(xmin = min(x),
ymin = min(y),
xmax = max(x),
ymax = max(y))  |>
dplyr::ungroup()  |>
dplyr::mutate(
x = (x-xmin) * 1/(xmax-xmin),
y = (y-ymin) * 1/(ymax-ymin)
)  |>
dplyr::select(x,y,cell)  |>
as.data.frame()
rownames(coords.local) <- coords.local$cell
coords.local
rownames(coords.local) <- coords.local$cell
coords.local <- coords.local[,1:2]
coords.local
sce <- SingleCellExperiment::SingleCellExperiment(list(counts=counts_matrix, norm=norm_matrix),
colData=DataFrame(anno_table),
rowData=DataFrame(gene_table)
)
?DataFrame
DataFrame::DataFrame(anno_table)
S4Vectors::DataFrame(anno_table)
sce <- SingleCellExperiment::SingleCellExperiment(list(counts=counts_matrix,
norm=norm_matrix),
colData=S4Vectors::DataFrame(anno_table),
rowData=S4Vectors::DataFrame(gene_table)
)
so@reductions
# Jam in reductions
# without recreating them from scratch.
reductions <- names(so@reductions)
reductions
!all(reductions %in% names(so@reductions))
reductions
reduction <- "umap.rpca"
so@reductions[[reduction]]@cell.embeddings
so@reductions[[reduction]]@cell.embeddings
for (reduction in reductions) {
reducedDim(sce, type=reduction ) <- so@reductions[[reduction]]@cell.embeddings
}
?reducedDim
SingleCellExperiment::reducedDim(sce, type=reduction ) <- so@reductions[[reduction]]@cell.embeddings
for (reduction in reductions) {
SingleCellExperiment::reducedDim(sce, type=reduction ) <- so@reductions[[reduction]]@cell.embeddings
}
# Then add spatial coordinates as another dimension
SingleCellExperiment::reducedDim(sce, type="local_spatial" )  <-  coords.local[colnames(sce),]
SingleCellExperiment::reducedDim(sce, type="global_spatial" ) <-  coords.global[colnames(sce),]
# overall coords
coords.global <- coords[,1:2]
coords.global <- coords.global[colnames(so),]
# Then add spatial coordinates as another dimension
SingleCellExperiment::reducedDim(sce, type="local_spatial" )  <-  coords.local[colnames(sce),]
SingleCellExperiment::reducedDim(sce, type="global_spatial" ) <-  coords.global[colnames(sce),]
#assay="Nanostring"
#fov_id = 'fov_name'
convert_seurat_to_viewable_sce <- function(so, assay="Nanostring", fov_id = 'fov_name', reductions=NA) {
counts_matrix <- Seurat::GetAssayData(so, assay = assay, layer = 'counts')
norm_matrix   <- Seurat::GetAssayData(so, assay = assay, layer = 'data')
# gene info
gene_table <- so@assays[[assay]]@meta.data
rownames(gene_table) <- rownames(so@assays[[assay]])
# cell info
anno_table <- so@meta.data
# Add x/y coords
# One image (slide) at a time
images <- names(so@images)
#coords_with_fov <- function(so, image) {
#  coords <- Seurat::GetTissueCoordinates(object=so, image = image)
#  coords$image <-
#}
coords_list      <- lapply(FUN=Seurat::GetTissueCoordinates, X=images, object=so)
coords           <- dplyr::bind_rows(coords_list)
rownames(coords) <- coords$cell
# overall coords
coords.global <- coords[,1:2]
coords.global <- coords.global[colnames(so),]
# Create coordinates in the 0..1 space
# because I can't zoom
# THese make sense when subset to a single fov only, else they'll be overplotted.
fov_lookup <- setNames(so@meta.data[,fov_id], nm=colnames(so))
coords.local <- coords
coords.local$fov_name <- fov_lookup[coords.local$cell]
coords.local <-
coords.local  |> dplyr::group_by(fov_name)  |>
dplyr::mutate(xmin = min(x),
ymin = min(y),
xmax = max(x),
ymax = max(y))  |>
dplyr::ungroup()  |>
dplyr::mutate(
x = (x-xmin) * 1/(xmax-xmin),
y = (y-ymin) * 1/(ymax-ymin)
)  |>
dplyr::select(x,y,cell)  |>
as.data.frame()
rownames(coords.local) <- coords.local$cell
coords.local <- coords.local[,1:2]
# Build a simple SCE
sce <- SingleCellExperiment::SingleCellExperiment(list(counts=counts_matrix,
norm=norm_matrix),
colData=S4Vectors::DataFrame(anno_table),
rowData=S4Vectors::DataFrame(gene_table)
)
# Jam in reductions
# without recreating them from scratch.
# https://rdrr.io/bioc/SingleCellExperiment/man/reducedDims.html
# Check for specified reductions, or get all present.
if (is.na(reductions)) {
reductions <- names(so@reductions)
}
if( !all(reductions %in% names(so@reductions)) ) {
stop(paste("Can't find all reductions in seurat object: see only ",
paste(names(so@reductions))))
}
# Add them one by one
for (reduction in reductions) {
SingleCellExperiment::reducedDim(sce, type=reduction ) <- so@reductions[[reduction]]@cell.embeddings
}
# Then add spatial coordinates as another dimension
SingleCellExperiment::reducedDim(sce, type="local_spatial" )  <-  coords.local[colnames(sce),]
SingleCellExperiment::reducedDim(sce, type="global_spatial" ) <-  coords.global[colnames(sce),]
return(sce)
}
reductions
sce <- convert_seurat_to_viewable_sce(so,
fov_id = 'fov_name',
reductions=c(   "integrated.umap", "integrated.rpca"))
#assay="Nanostring"
#fov_id = 'fov_name'
convert_seurat_to_viewable_sce <- function(so, assay="Nanostring", fov_id = 'fov_name', reductions=c()) {
counts_matrix <- Seurat::GetAssayData(so, assay = assay, layer = 'counts')
norm_matrix   <- Seurat::GetAssayData(so, assay = assay, layer = 'data')
# gene info
gene_table <- so@assays[[assay]]@meta.data
rownames(gene_table) <- rownames(so@assays[[assay]])
# cell info
anno_table <- so@meta.data
# Add x/y coords
# One image (slide) at a time
images <- names(so@images)
#coords_with_fov <- function(so, image) {
#  coords <- Seurat::GetTissueCoordinates(object=so, image = image)
#  coords$image <-
#}
coords_list      <- lapply(FUN=Seurat::GetTissueCoordinates, X=images, object=so)
coords           <- dplyr::bind_rows(coords_list)
rownames(coords) <- coords$cell
# overall coords
coords.global <- coords[,1:2]
coords.global <- coords.global[colnames(so),]
# Create coordinates in the 0..1 space
# because I can't zoom
# THese make sense when subset to a single fov only, else they'll be overplotted.
fov_lookup <- setNames(so@meta.data[,fov_id], nm=colnames(so))
coords.local <- coords
coords.local$fov_name <- fov_lookup[coords.local$cell]
coords.local <-
coords.local  |> dplyr::group_by(fov_name)  |>
dplyr::mutate(xmin = min(x),
ymin = min(y),
xmax = max(x),
ymax = max(y))  |>
dplyr::ungroup()  |>
dplyr::mutate(
x = (x-xmin) * 1/(xmax-xmin),
y = (y-ymin) * 1/(ymax-ymin)
)  |>
dplyr::select(x,y,cell)  |>
as.data.frame()
rownames(coords.local) <- coords.local$cell
coords.local <- coords.local[,1:2]
# Build a simple SCE
sce <- SingleCellExperiment::SingleCellExperiment(list(counts=counts_matrix,
norm=norm_matrix),
colData=S4Vectors::DataFrame(anno_table),
rowData=S4Vectors::DataFrame(gene_table)
)
# Jam in reductions
# without recreating them from scratch.
# https://rdrr.io/bioc/SingleCellExperiment/man/reducedDims.html
# Check for specified reductions, or get all present.
if (length(reductions)==0) {
reductions <- names(so@reductions)
}
if( !all(reductions %in% names(so@reductions)) ) {
stop(paste("Can't find all reductions in seurat object: see only ",
paste(names(so@reductions))))
}
# Add them one by one
for (reduction in reductions) {
SingleCellExperiment::reducedDim(sce, type=reduction ) <- so@reductions[[reduction]]@cell.embeddings
}
# Then add spatial coordinates as another dimension
SingleCellExperiment::reducedDim(sce, type="local_spatial" )  <-  coords.local[colnames(sce),]
SingleCellExperiment::reducedDim(sce, type="global_spatial" ) <-  coords.global[colnames(sce),]
return(sce)
}
sce <- convert_seurat_to_viewable_sce(so,
fov_id = 'fov_name',
reductions=c(   "integrated.umap", "integrated.rpca"))
reductions=c("integrated.umap", "integrated.rpca"
)
# Build a simple SCE
sce <- SingleCellExperiment::SingleCellExperiment(list(counts=counts_matrix,
norm=norm_matrix),
colData=S4Vectors::DataFrame(anno_table),
rowData=S4Vectors::DataFrame(gene_table)
)
reductions %in% names(so@reductions)
names(so@reductions)
sce2 <- convert_seurat_to_viewable_sce(so,
fov_id = 'fov_name',
reductions=c("umap.rpca", "integrated.rpca"))
roxygenise()
roxygenise()
roxygenise()
check()
stats::setNames
?ymax
?min
document()
check()
document()
check()
use_readme_rmd()
devtools::build_readme()
